#!/usr/bin/env ruby

$LOAD_PATH.unshift File.expand_path(File.dirname(__FILE__) + '/../lib')
require 'work'

# Due to access permissions (i.e. the hosts file isn't usually
# writable to the current user, we need the ability to re-run
# this process under the super user.
def sudome
  if ENV["USER"] != "root"
    # `exec` replaces this process, so no need to `exit` as well.
    dotfile = Work::DotFile.locate
    
    if dotfile.exists? and dotfile.rvm
      exec("rvmsudo #{$0} #{ARGV.join(' ')}")
    else
      exec("sudo #{$0} #{ARGV.join(' ')}")
    end
  end
end

# Find the location of the user's work preferences.
dotfile = Work::DotFile.locate

# We need a list of domains to work with, which is stored in a
# ~/.work hidden file.
if ARGV.first == 'setup'
  if dotfile.exists?
    puts "Work file already exists at #{dotfile.path}"
  else
    dotfile.write!
    puts "Default work domains added to #{dotfile.path}. Remember to the rvm configuration if you're running that!"
  end

# Not a setup command, so we'll need the `Teacher`
else
  # Warn the user if they've not set up a domains list
  if dotfile.domains.length == 0
    puts "Domain list is empty.  Add work domains to #{dotfile.path}"
    puts "or run `#{$0} setup` to populate with the default list."
    exit
  end

  # If we can't write to the hosts file, re-run but with `sudo`.
  begin
    p = Work::Teacher.new(dotfile.domains, dotfile.ip)
  rescue Work::HostsFileNotWritable
    sudome
  end

  # Decide if we're beginning or ending work.
  cmd = File.basename($0)
  action = ARGV.first || 'on'

  if (cmd == 'play' && %{ start on begin }.include?(action)) ||
     (cmd != 'play' && %{ stop off end }.include?(action))
    puts "Out in to the playground, children."
    p.play
  else
    puts "Bums on seats, please."
    # Clear out any old data in case the domain list or IP address has
    # been updated and we're just running `work` again without a `play`.
    p.play
    p.work
  end

  # Run the command to reload the machine's DNS cache.
  p.recache!
end
